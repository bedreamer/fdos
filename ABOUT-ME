LiJie 2013/01/15 <cuplision@163.com>

目的
=========
   一切只为兴趣，一心只为学习， 没有任何名利心。

一、反省
=========
    从2010年6月起我开始着手学习编写操作系统，这个过程中曾两次重写内核代码，第一次
重写的原因是对计算机周边硬件工作原理不够了解导致无法继续写下去。第二次重写的原因
有两个，其一是实在不堪忍受修改前一次所写代码的痛苦，其二是对操作系统接口不够了解
导致内核扩展性基本为零。经过前两次的失败经历我将所需知识总结在这里。
    前一次的内核代码可以在github上找到 <https://github.com/bedreamer/fool.git>

二、环境
=========
2. 1. 语言
    开发内核需要基本的汇编（AT&T/Intel）、C语言、脚本（bash）、Makefile。这些是
最基本的知识储备。开发语言也学得基本够用了，这次准备使用AT&T的汇编语法。
2. 2. 资料
    操作系统内核内容繁杂，其中不乏各种各样的标准，例如：IED设备接口，键盘，VGA操
作接口等。这一部分已经在前两次做了相关准备，其他资料可在网上找到。
2. 3. 工具
    内核深入系统底层，需要合适的工具，例如要学会使用二进制文件查看工具 xxd 或
hexdump，反汇编查看工具objdump，镜像相关工具dd，mount，umount，mkfs，
grub-install，losetup，fdisk，grep，sed，make等。
2. 4. 调试
    内核的调试比较复杂，经过前两次的经历，找到了两个较好的调试工具bochs和VirtualBox
kdbg。其中kdbg配合bochs使用可进行源码级的调试，但性能较差。VirtualBox可进行汇编
级的调试，性能较好，但面临硬盘操作较复杂的问题（无法直接使用img文件），因此这次
仅用该工具进行辅助调试。

三、技术
=========
3. 1. 技术回顾
    采用linux中通用的链表结构，自旋锁内核同步较困难，效率低。采用文件来表示设备，设
备使用主设备号和次设备号描述，采用统一的文件系统来进行系统设备的管理。没有具体结构
的MMU（这可能是后期内核实现起来的绊脚石），设备I/O采用PIO方式。
    调试部分采用软盘镜像进行操作，该软盘采用自己所写的工具生成（工具代码已经丢失）。
但软盘毕竟已经属于落后的设备了，因此在这次编写中将弃用。
3. 2. 技术引入
    DMA，MMU，IPC，FS ，IDE&AHCI,PCI。
3. 2. 1. DMA
    一直以来只是听说DMA效率很高，但是也不知道DMA为甚么高，以及如何来进行DMA
操作，这次将引入DMA概念，亲自动手实现DMA操作。
3. 2. 2. MMU
    在linux1.0 代码中看到了linus是如何进行内核内存管理的，想要将该技术进行一次复制，在
内核中采用这种内存管理技术。
3. 2. 3. IPC
    前两次系统中存在进程，但没有实现进程间通信，这次将首先在系统中采用信号技术实现
进程间的通信。
3. 2. 4. FS
    FS是linux的核心思想（一切设备皆文件），第一次没有引入文件系统的概念，第二次实现失败了。
这次希望可以写出较完善的FS。
3. 2. 5. IDE&AHCI
    前两次的磁盘IO都是IDE模式的硬盘，这次希望加入AHCI模式的支持。
3. 2. 6. PCI
    PCI总线是当前计算机中主流的总线类型，同样希望在该内核中加入对PCI总线的支持。
3. 3. 技术意淫
    网络、USB都是我很期望进行了解的部分，希望在以后可以学习学习。

四、准备
=========
4. 1. 参照标准
    无规矩不成方圆，内核技术参照IEEE 1003.x相关标准。














